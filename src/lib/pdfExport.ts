import jsPDF from 'jspdf';

interface RetirementPlan {
  name: string;
  targetYear: number;
  startingBTC: number;
  monthlyDCA: number;
  dcaGrowthRate: number;
  btcCAGR: number;
  finalBTC?: number;
  finalValue?: number;
  totalInvested?: number;
  roiMultiplier?: number;
}

interface DipBuy {
  year: number;
  amount: number;
  btcPrice: number;
}

export function generateRetirementBlueprint(
  plan: RetirementPlan,
  dipBuys: DipBuy[],
  chartData: any[]
) {
  const doc = new jsPDF();
  
  // Title
  doc.setFontSize(24);
  doc.setTextColor(245, 158, 11); // Orange
  doc.text('FutureSats.io', 20, 30);
  
  doc.setFontSize(16);
  doc.setTextColor(255, 255, 255);
  doc.text('BTC Retirement Blueprint', 20, 45);
  
  // Plan Details
  doc.setFontSize(14);
  doc.setTextColor(156, 163, 175); // Gray
  doc.text('Plan Details:', 20, 65);
  
  doc.setFontSize(12);
  doc.setTextColor(255, 255, 255);
  doc.text(`Plan Name: ${plan.name}`, 20, 80);
  doc.text(`Target Year: ${plan.targetYear}`, 20, 90);
  doc.text(`Starting BTC: ${plan.startingBTC} BTC`, 20, 100);
  doc.text(`Monthly DCA: RM ${plan.monthlyDCA.toLocaleString()}`, 20, 110);
  doc.text(`DCA Growth Rate: RM ${plan.dcaGrowthRate}/month`, 20, 120);
  doc.text(`BTC CAGR: ${plan.btcCAGR}%`, 20, 130);
  
  // Results Summary
  if (plan.finalBTC && plan.finalValue && plan.totalInvested) {
    doc.setFontSize(14);
    doc.setTextColor(34, 197, 94); // Green
    doc.text('Projected Results:', 20, 150);
    
    doc.setFontSize(12);
    doc.setTextColor(255, 255, 255);
    doc.text(`Final BTC: ${plan.finalBTC.toFixed(2)} BTC`, 20, 165);
    doc.text(`Portfolio Value: RM ${plan.finalValue.toLocaleString()}`, 20, 175);
    doc.text(`Total Invested: RM ${plan.totalInvested.toLocaleString()}`, 20, 185);
    doc.text(`ROI Multiplier: ${plan.roiMultiplier?.toFixed(1)}x`, 20, 195);
  }
  
  // Dip Buys
  if (dipBuys.length > 0) {
    doc.addPage();
    doc.setFontSize(14);
    doc.setTextColor(239, 68, 68); // Red
    doc.text('Strategic Dip Buys:', 20, 30);
    
    doc.setFontSize(12);
    doc.setTextColor(255, 255, 255);
    
    dipBuys.forEach((dip, index) => {
      const y = 45 + (index * 20);
      doc.text(`${dip.year}: RM ${dip.amount.toLocaleString()} @ RM ${dip.btcPrice.toLocaleString()}/BTC`, 20, y);
    });
  }
  
  // Strategy Tips
  doc.addPage();
  doc.setFontSize(14);
  doc.setTextColor(147, 51, 234); // Purple
  doc.text('Strategy Tips:', 20, 30);
  
  doc.setFontSize(10);
  doc.setTextColor(255, 255, 255);
  
  const tips = [
    '• Plan for bear markets every 4 years (halving cycles)',
    '• Buy during fear, not during euphoria',
    '• Increase DCA amounts over time as income grows',
    '• Use 10-20% of liquid savings for strategic dip buys',
    '• Consider business exits or windfalls for large purchases',
    '• Stay consistent with your DCA schedule',
    '• Don\'t try to time the market perfectly',
    '• Focus on accumulating BTC, not trading it'
  ];
  
  tips.forEach((tip, index) => {
    const y = 45 + (index * 12);
    doc.text(tip, 20, y);
  });
  
  // Footer
  doc.setFontSize(10);
  doc.setTextColor(156, 163, 175);
  doc.text('Generated by FutureSats.io - Built by Fiz @ F12.GG', 20, 280);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 285);
  
  return doc;
}

export function downloadRetirementBlueprint(
  plan: RetirementPlan,
  dipBuys: DipBuy[],
  chartData: any[]
) {
  const doc = generateRetirementBlueprint(plan, dipBuys, chartData);
  doc.save(`${plan.name.replace(/\s+/g, '_')}_retirement_blueprint.pdf`);
} 