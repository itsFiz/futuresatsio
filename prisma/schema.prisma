// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Auth fields
  clerkId   String?  @unique
  isPro     Boolean  @default(false)
  planCount Int      @default(0)

  // Relationships
  retirementPlans RetirementPlan[]
  dipBuys        DipBuy[]

  @@map("users")
}

model RetirementPlan {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Simulation parameters
  targetYear     Int
  startingBTC    Float
  monthlyDCA     Int
  dcaGrowthRate  Int
  btcCAGR        Float
  currentYear    Int

  // Results
  finalBTC       Float?
  finalValue     Int?
  totalInvested  Int?
  roiMultiplier  Float?

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  dipBuys DipBuy[]
  simulationData SimulationData[]

  @@map("retirement_plans")
}

model DipBuy {
  id        String   @id @default(cuid())
  year      Int
  amount    Int
  btcPrice  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  planId String?
  plan   RetirementPlan? @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("dip_buys")
}

model SimulationData {
  id        String   @id @default(cuid())
  year      Int
  btcAccumulated Float
  portfolioValue  Int
  totalInvested   Int
  btcPrice        Int
  createdAt DateTime @default(now())

  // Relationships
  planId String
  plan   RetirementPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("simulation_data")
}
