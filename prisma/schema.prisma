// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Custom fields
  isPro     Boolean  @default(false)
  planCount Int      @default(0)
  role      UserRole @default(USER)
  password  String?  // <-- Added for credentials auth

  // NextAuth fields
  accounts Account[]
  sessions Session[]

  // Relationships
  retirementPlans RetirementPlan[]
  dipBuys        DipBuy[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model RetirementPlan {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Simulation parameters
  targetYear     Int
  startingBTC    Float
  monthlyDCA     Int
  dcaGrowthRate  Int
  btcCAGR        Float
  currentYear    Int

  // Results
  finalBTC       Float?
  finalValue     Int?
  totalInvested  Int?
  roiMultiplier  Float?

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  dipBuys DipBuy[]
  simulationData SimulationData[]

  @@map("retirement_plans")
}

model DipBuy {
  id        String   @id @default(cuid())
  year      Int
  amount    Int
  btcPrice  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  planId String?
  plan   RetirementPlan? @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("dip_buys")
}

model SimulationData {
  id        String   @id @default(cuid())
  year      Int
  btcAccumulated Float
  portfolioValue  Int
  totalInvested   Int
  btcPrice        Int
  createdAt DateTime @default(now())

  // Relationships
  planId String
  plan   RetirementPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("simulation_data")
}

model ModelSubmission {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic information
  modelName    String
  authorName   String
  email        String
  xHandle      String?
  
  // Model details
  description  String
  thesis       String
  startingPrice Float
  cagrValues   Float[] // Array of 30 CAGR values
  methodology  String
  expectedOutcome String
  
  // Status
  status       SubmissionStatus @default(PENDING)
  reviewedAt   DateTime?
  reviewedBy   String?
  reviewNotes  String?
  
  // Email tracking
  confirmationEmailSent Boolean @default(false)
  confirmationEmailId   String?

  @@map("model_submissions")
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum UserRole {
  USER
  ADMIN
}

model BTCMarketData {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Market data
  currentPrice Float
  marketCap    Float
  volume       Float
  lastUpdated  String
  
  // Price history (stored as JSON)
  priceHistory Json?

  // Metadata
  dataSource   String   @default("coingecko") // "coingecko" or "fallback"
  isActive     Boolean  @default(true) // Only one record should be active at a time

  @@map("btc_market_data")
}
